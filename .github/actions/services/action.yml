name: Composite action python tests
description: Composite action python tests
inputs:
      use_postgres:
        description: Use postgres service
        required: true
      use_elastic_search:
        description: Use elastic_search service
        required: true
      use_memcached:
        description: Use memcached service
        required: true
      use_redis:
        description: Use redis service
        required: true
      use_rabbitmq:
        description: Use rabbitmq service
        required: true
      use_mongo:
        description: Use mongo service
        required: true


      postgres_db:
        description: Postgres service db. Requires use_postgres to be true
        required: true
      postgres_user:
        description: Postgres service user. Requires use_postgres to be true
        required: true
      postgres_password:
        description: Postgres service password. Requires use_postgres to be true
        required: true


runs:
  using: "composite"
  steps:

        - name: Create mongo docker-compose file
          run: |
            echo "version: '3.7'" > mongo.yml
            echo "services:" >> mongo.yml
            echo "  mongo:" >> mongo.yml
            echo "    image: library/mongo:4.4" >> mongo.yml
            echo "    container_name: mongo" >> mongo.yml
            echo "    ports:" >> mongo.yml
            echo "      - 27017:27017" >> mongo.yml
            echo "    volumes:" >> mongo.yml
            echo "      - mongo:/data/db" >> mongo.yml
            echo "volumes:" >> mongo.yml
            echo "  mongo:" >> mongo.yml
          shell:
            bash

        - name: Create postgres docker-compose file
          run: |
            echo "version: '3.7'" > postgres.yml
            echo "services:" >> postgres.yml
            echo "  postgres:" >> postgres.yml
            echo "    image: library/postgres:10.14-alpine" >> postgres.yml
            echo "    container_name: postgres" >> postgres.yml
            echo "    environment:" >> postgres.yml
            echo "      POSTGRES_DB: ${{ inputs.postgres_db }}" >> postgres.yml
            echo "      POSTGRES_USER: ${{ inputs.postgres_user }}" >> postgres.yml
            echo "      POSTGRES_PASSWORD: ${{ inputs.postgres_password }}" >> postgres.yml
            echo "    ports:" >> postgres.yml
            echo "      - 5432:5432" >> postgres.yml
            echo "    healthcheck:" >> postgres.yml
            echo "      test: pg_isready" >> postgres.yml
            echo "      interval: 10s" >> postgres.yml
            echo "      timeout: 5s" >> postgres.yml
            echo "      retries: 5" >> postgres.yml
          shell:
            bash

        - name: Create elasticsearch docker-compose file
          run: |
            echo "version: '3.7'" > elastic_search.yml
            echo "services:" >> elastic_search.yml
            echo "  elastic_search:" >> elastic_search.yml
            echo "    image: elasticsearch:7.10.1" >> elastic_search.yml
            echo "    container_name: elastic_search" >> elastic_search.yml
            echo "    environment:" >> elastic_search.yml
            echo "      ES_JAVA_OPTS: -Xms1g -Xmx1g" >> elastic_search.yml
            echo "      discovery.type: single-node" >> elastic_search.yml
            echo "    ports:" >> elastic_search.yml
            echo "      - 59200:9200" >> elastic_search.yml
            echo "    healthcheck:" >> elastic_search.yml
            echo "      test: curl -X GET 'localhost:9200/_cluster/health?wait_for_status=yellow&timeout=180s&pretty'" >> elastic_search.yml
            echo "      interval: 10s" >> elastic_search.yml
            echo "      timeout: 180s" >> elastic_search.yml
            echo "      retries: 5" >> elastic_search.yml
          shell:
            bash

        - name: Create memcached docker-compose file
          run: |
            echo "version: '3.7'" > memcached.yml
            echo "services:" >> memcached.yml
            echo "  memcached:" >> memcached.yml
            echo "    container_name: memcached" >> memcached.yml
            echo "    image: memcached:1.6.9-alpine" >> memcached.yml
            echo "    ports:" >> memcached.yml
            echo "      - 11211:11211" >> memcached.yml
          shell:
            bash

        - name: Create redis docker-compose file
          run: |
            echo "version: '3.7'" > redis.yml
            echo "services:" >> redis.yml
            echo "  redis:" >> redis.yml
            echo "    container_name: redis" >> redis.yml
            echo "    image: library/redis:5.0.9-alpine" >> redis.yml
            echo "    ports:" >> redis.yml
            echo "      - 6379:6379" >> redis.yml
          shell:
            bash

        - name: Create rabbitmq docker-compose file
          if: inputs.use_rabbitmq
          run: |
            echo "version: '3.7'" > rabbitmq.yml
            echo "services:" >> rabbitmq.yml
            echo "  rabbitmq:" >> rabbitmq.yml
            echo "    container_name: rabbitmq" >> rabbitmq.yml
            echo "    image: library/rabbitmq:3.9-management-alpine" >> rabbitmq.yml
            echo "    ports:" >> rabbitmq.yml
            echo "      - 15672:15672" >> rabbitmq.yml
            echo "      - 5672:5672" >> rabbitmq.yml
          shell:
            bash

        - name: Execute docker-compose up
          run: |
            CLI=docker-compose
            if [[ ${{ inputs.use_postgres }} != 'false' ]]; then
              CLI="${CLI} -f postgres.yml"
            fi
            if [[ ${{ inputs.use_elastic_search }} != 'false' ]]; then
              CLI="${CLI} -f elastic_search.yml"
            fi
            if [[ ${{ inputs.use_memcached }} != 'false' ]]; then
              CLI="${CLI} -f memcached.yml"
            fi
            if [[ ${{ inputs.use_redis }} != 'false' ]]; then
              CLI="${CLI} -f redis.yml"
            fi
            if [[ ${{ inputs.use_rabbitmq }} != 'false' ]]; then
              CLI="${CLI} -f rabbitmq.yml"
            fi
            if [[ ${{ inputs.use_mongo }} != 'false' ]]; then
              CLI="${CLI} -f mongo.yml"
            fi

            # add other containers here
            echo "Running: ${CLI} up -d"
            $CLI up -d
            $CLI ps
          shell:
            bash

        - name: Wait for docker to be ready
          run: |
            if [[ ${{ inputs.use_postgres }} != 'false' ]]; then
             while [ "`docker inspect -f {{.State.Health.Status}} postgres`" != "healthy" ]; do
                sleep 2;
             done
            fi
            if [[ ${{ inputs.use_elastic_search }} != 'false' ]]; then
              while [ "`docker inspect -f {{.State.Health.Status}} elastic_search`" != "healthy" ]; do
                sleep 2;
              done
            fi
          shell: bash