# Generated by Django 4.2.15 on 2024-10-14 07:24

from django.db import migrations


def migrate_urlhaus(apps, schema_editor):
    AnalyzerConfig = apps.get_model("analyzers_manager", "AnalyzerConfig")
    ac = AnalyzerConfig.objects.filter(name="URLhaus").first()
    if not ac:
        return
    ac.mapping_data_model = {
        "urlhaus_reference": "external_references",
        "$Malicious": "evaluation",
        "urls.url": "related_threats",
    }
    ac.save()


def migrate_maxmind(apps, schema_editor):
    AnalyzerConfig = apps.get_model("analyzers_manager", "AnalyzerConfig")
    ac = AnalyzerConfig.objects.filter(name="MaxMindGeoIP").first()
    if not ac:
        return
    ac.mapping_data_model = {
        "country_code": "country.iso_code",
        "registered_country_code": "registered_country_code.iso_code",
        "asn": "autonomous_system_number",
        "isp": "autonomous_system_organization",
    }
    ac.save()


def migrate_abuse_ipdb(apps, schema_editor):
    AnalyzerConfig = apps.get_model("analyzers_manager", "AnalyzerConfig")
    ac = AnalyzerConfig.objects.filter(name="AbuseIPDB").first()
    if not ac:
        return
    ac.mapping_data_model = {
        "country_code": "data.countryCode",
        "external_references": "permalink",
        "resolutions": "data.hostnames",
        "isp": "data.isp",
        "tags": "categories_found",
    }
    ac.save()


def migrate_bgp_ranking(apps, schema_editor):
    AnalyzerConfig = apps.get_model("analyzers_manager", "AnalyzerConfig")
    ac = AnalyzerConfig.objects.filter(name="BGP_Ranking").first()
    if not ac:
        return
    ac.mapping_data_model = {
        "asn": "asn",
        "asn_rank": "asn_rank",
    }
    ac.save()


def migrate_circl_passive_ssl(apps, schema_editor):
    AnalyzerConfig = apps.get_model("analyzers_manager", "AnalyzerConfig")
    ac = AnalyzerConfig.objects.filter(name="CIRCLPassiveSSL").first()
    if not ac:
        return
    ac.mapping_data_model = {
        "certificates": "certificates",
    }
    ac.save()


class Migration(migrations.Migration):

    dependencies = [
        ("analyzers_manager", "0123_analyzerconfig_mapping_data_model"),
    ]

    operations = [
        migrations.RunPython(migrate_maxmind, migrations.RunPython.noop),
        migrations.RunPython(migrate_abuse_ipdb, migrations.RunPython.noop),
        migrations.RunPython(migrate_urlhaus, migrations.RunPython.noop),
        migrations.RunPython(migrate_bgp_ranking, migrations.RunPython.noop),
        migrations.RunPython(migrate_circl_passive_ssl, migrations.RunPython.noop),
    ]
