# This file is a part of IntelOwl https://github.com/intelowlproject/IntelOwl
# See the file 'LICENSE' for copying permission.

# Generated by Django 3.2.18 on 2023-03-07 08:29
import django
from django.db import migrations, models


def migrate_plugin_config(apps, schema_editor):
    PluginConfig = apps.get_model("api_app", "PluginConfig")
    AnalyzerConfig = apps.get_model("analyzers_manager", "AnalyzerConfig")
    ConnectorConfig = apps.get_model("connectors_manager", "ConnectorConfig")
    VisualizerConfig = apps.get_model("visualizers_manager", "VisualizerConfig")

    for plugin_config in PluginConfig.objects.all():
        plugin_config.for_organization = plugin_config.organization is not None
        if plugin_config.type == "1":
            class_ = AnalyzerConfig
        elif plugin_config.type == "2":
            class_ = ConnectorConfig
        elif plugin_config.type == "3":
            class_ = VisualizerConfig
        else:
            raise RuntimeError("Not configured")
        params = class_.objects.get(name=plugin_config.plugin_name).parameters
        plugin_config.parameter = params.get(name=plugin_config.attribute)
        plugin_config.full_clean()
        plugin_config.save()


def reverse_migrate_plugin_config(apps, schema_editor):
    PluginConfig = apps.get_model("api_app", "PluginConfig")
    AnalyzerConfig = apps.get_model("analyzers_manager", "AnalyzerConfig")
    ConnectorConfig = apps.get_model("connectors_manager", "ConnectorConfig")
    apps.get_model("visualizers_manager", "VisualizerConfig")
    for plugin_config in PluginConfig.objects.all():
        plugin_config.organization = (
            plugin_config.owner.membership.organization
            if plugin_config.for_organization
            else None
        )
        config = (
            plugin_config.parameter.analyzer_config
            or plugin_config.parameter.connector_config
            or plugin_config.parameter.visualizer_config
        )
        plugin_config.plugin_name = config.name
        plugin_config.attribute = plugin_config.parameter.name
        plugin_config.type = (
            "1"
            if isinstance(config, AnalyzerConfig)
            else "2"
            if isinstance(config, ConnectorConfig)
            else "3"
        )
        plugin_config.config_type = "2" if plugin_config.parameter.is_secret else "1"
        plugin_config.full_clean()
        plugin_config.save()


class Migration(migrations.Migration):
    dependencies = [
        ("api_app", "0027_parameter"),
        ("analyzers_manager", "0023_params"),
        ("connectors_manager", "0015_params"),
        ("visualizers_manager", "0013_params"),
    ]

    operations = [
        migrations.AddField(
            model_name="pluginconfig",
            name="parameter",
            field=models.ForeignKey(
                "api_app.parameter",
                default=None,
                on_delete=django.db.models.deletion.CASCADE,
                null=True,
                related_name="values",
            ),
        ),
        migrations.AddField(
            model_name="pluginconfig",
            name="for_organization",
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="value",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.RemoveConstraint(
            model_name="pluginconfig",
            name="unique_custom_config_entry",
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="config_type",
            field=models.CharField(
                choices=[("1", "Parameter"), ("2", "Secret")],
                default="1",
                max_length=2,
                null=True,
                blank=True,
            ),
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="type",
            field=models.CharField(
                choices=[("1", "Analyzer"), ("2", "Connector")],
                max_length=2,
                null=True,
                blank=True,
            ),
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="plugin_name",
            field=models.CharField(max_length=128, null=True, blank=True),
        ),
        migrations.AlterField(
            model_name="pluginconfig",
            name="attribute",
            field=models.CharField(max_length=128, null=True, blank=True),
        ),
        migrations.RunPython(migrate_plugin_config, reverse_migrate_plugin_config),
        migrations.AlterField(
            model_name="pluginconfig",
            name="parameter",
            field=models.ForeignKey(
                "api_app.parameter",
                on_delete=django.db.models.deletion.CASCADE,
                null=False,
                related_name="values",
            ),
        ),
        migrations.RemoveField(model_name="pluginconfig", name="organization"),
        migrations.RemoveField(model_name="pluginconfig", name="attribute"),
        migrations.RemoveField(model_name="pluginconfig", name="plugin_name"),
        migrations.RemoveField(model_name="pluginconfig", name="type"),
        migrations.RemoveField(
            model_name="pluginconfig",
            name="config_type",
        ),
        migrations.AlterUniqueTogether(
            name="pluginconfig",
            unique_together={("owner", "for_organization", "parameter")},
        ),
    ]
