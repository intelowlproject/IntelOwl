"""Module for CloudFlare Family API
This API block connection to malicious domains because do not resolve related IP.
This module use CloudFlare as analyzer, if domain cannot be resolved is malicious.
"""

# todo check API work and terminate implementation:
# remove skip decorator from test
# complete run docstring
# chose return type
# use this analyzer

import traceback
import requests

from api_app.exceptions import AnalyzerRunException
from api_app.script_analyzers import general

import logging
logger = logging.getLogger(__name__)


def run(analyzer_name, job_id, observable_name, observable_classification, additional_config_params):
    """???

    :param analyzer_name: Analyzer configuration in analyzer_config.json
    :type analyzer_name: str
    :param job_id: job identifier
    :type job_id: str
    :param observable_name: analyzed observable
    :type observable_name: str
    :param observable_classification: observable classification (allow: ip or domain) ip only classic
    :type observable_classification: str
    :param additional_config_params: params service to select the service
    :type additional_config_params: dict
    :return: result: ???
    :rtype: result: ???
    """
    logger.info("started analyzer {} job_id {} observable {}"
                "".format(analyzer_name, job_id, observable_name))
    report = general.get_basic_report_template(analyzer_name)
    try:
        result = {}
        try:
            client = requests.session()
            params = {
                'name': observable_name,
                'type': 'A',
                'ct': 'application/dns-json',
            }
            response = client.get('https://security.cloudflare-dns.com/dns-query/', params=params)
            response.raise_for_status()
            #todo complete analysis of result
        except requests.exceptions.RequestException as error:
            error_message = f"job_id:{job_id}, analyzer:{analyzer_name}, " \
                            f"observable_classification:{observable_classification}, " \
                            f"observable_name:{observable_name}, RequestException {error}"
            logger.error(error_message)
            report['errors'].append(error_message)
            report['success'] = False
        report['report'] = result
    except AnalyzerRunException as e:
        error_message = "job_id:{} analyzer:{} observable_name:{} Analyzer error {}" \
                        "".format(job_id, analyzer_name, observable_name, e)
        logger.error(error_message)
        report['errors'].append(error_message)
        report['success'] = False
    except Exception as e:
        traceback.print_exc()
        error_message = "job_id:{} analyzer:{} observable_name:{} Unexpected error {}" \
                        "".format(job_id, analyzer_name, observable_name, e)
        logger.exception(error_message)
        report['errors'].append(str(e))
        report['success'] = False
    else:
        report['success'] = True

    general.set_report_and_cleanup(job_id, report)

    logger.info("ended analyzer {} job_id {} observable {}"
                "".format(analyzer_name, job_id, observable_name))

    return report
