# Generated by Django 4.1.7 on 2023-04-05 15:22

import django.db.models.deletion
from django.core.exceptions import ValidationError
from django.db import migrations, models

import api_app.fields

def create_config(configs, type:str, Parameter,ParameterConfig, PluginConfig):
    for config in configs:
        for param_name, param_values in config.params.items():
            param = Parameter(name=param_name, type=param_values["type"], description=param_values["description"], is_secret=False)
            try:
                param.full_clean()
            except ValidationError:
                param = Parameter.objects.get(name=param_name, type=param_values["type"], is_secret=False)
            else:
                param.save()

            param_config, _ = ParameterConfig.objects.get_or_create(parameter=param,
                                                             required=param_values.get("required", False))
            if "default" in param_values:
                PluginConfig.objects.get_or_create(
                    owner=None,
                    value=param_values["default"],
                    plugin_name=config.name,
                    attribute=param_name,
                    type=type,
                    config_type="1"
                )
            config.parameters.add(param_config)
        for secret_name, secret_values in config.secrets.items():
            secret = Parameter(name=secret_name, type=secret_values["type"],
                                                       description=secret_values["description"], is_secret=True)
            try:
                secret.full_clean()
            except ValidationError:
                secret = Parameter.objects.get(name=secret_name, type=secret_values["type"],
                                              is_secret=True)
            else:
                secret.save()

            param_config, _ = ParameterConfig.objects.get_or_create(parameter=secret, required=secret_values["required"])
            if "default" in secret_values:
                PluginConfig.objects.get_or_create(
                    owner=None,
                    value=secret_values["default"],
                    plugin_name=config.name,
                    attribute=secret_name,
                    type=type,
                    config_type="2"
                )
            config.parameters.add(param_config)
        config.save()


def migrate(apps, schema_editor):
    VisualizerConfig = apps.get_model("visualizers_manager", "VisualizerConfig")
    Parameter = apps.get_model("api_app", "Parameter")
    ParameterConfig = apps.get_model("api_app", "ParameterConfig")
    PluginConfig = apps.get_model("api_app", "PluginConfig")
    create_config(list(VisualizerConfig.objects.all()), "3", Parameter, ParameterConfig, PluginConfig)

def reverse_migrate(apps, schema_editor):
    ...


class Migration(migrations.Migration):

    dependencies = [
        ('visualizers_manager', '0012_alter_visualizerconfig_disabled_in_organizations_and_more'),
        ('api_app', '0027_parameter'),
    ]

    operations = [
        migrations.AddField(
            model_name="visualizerconfig",
            name="parameters",
            field=models.ManyToManyField(related_name='%(app_label)s_%(class)s_configurations',
                                         to='api_app.parameterconfig'),

        ),
        migrations.RunPython(
            migrate, reverse_migrate
        ),
        migrations.RemoveField(
            model_name="visualizerconfig",
            name="params"
        ),
        migrations.RemoveField(
            model_name="visualizerconfig",
            name="secrets"
        )

    ]
