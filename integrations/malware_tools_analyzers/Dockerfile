# this base was derived from Thug requirements:
# https://github.com/REMnux/docker/blob/master/thug/Dockerfile
FROM python:3.9-slim

ENV PROJECT_PATH=/opt/deploy
ENV LOG_PATH=/var/log/intel_owl/malware_tools_analyzers
ENV USER=malware_tools_analyzers-user

# update and install packages
# line 3: ClamAV deps
# line 4: Box-JS deps
# lines 5-6: Thug deps
RUN DEBIAN_FRONTEND=noninteractive apt-get update -qq \
    && apt-get install -y --no-install-recommends wget git libssl3 swig g++ make libssl-dev libmagic1 vim \
    clamav clamdscan clamav-daemon clamav-freshclam \
    nodejs npm gcc m4 \
    build-essential python3-dev python3-setuptools python3-wheel python-is-python3 libboost-dev libboost-iostreams-dev libboost-python-dev libboost-system-dev python3-pip libxml2-dev \
    libxslt-dev tesseract-ocr unzip libtool graphviz-dev automake libffi-dev graphviz libfuzzy-dev libfuzzy2 libjpeg-dev libffi-dev pkg-config clang autoconf

# Add a new low-privileged user
RUN useradd -ms /bin/bash ${USER} \
    && mkdir ${PROJECT_PATH} ${PROJECT_PATH}/thug ${PROJECT_PATH}/qiling ${PROJECT_PATH}/stringsifter ${PROJECT_PATH}/peframe ${PROJECT_PATH}/apkid

WORKDIR ${PROJECT_PATH}

# Install Box-js
RUN npm install box-js@1.9.17 --global --production \
    && mkdir -p /tmp/boxjs \
    && chown -R ${USER}:${USER} /tmp/boxjs

# Install CAPA
WORKDIR ${PROJECT_PATH}/capa
RUN wget -q https://github.com/mandiant/capa/releases/download/v8.0.0/capa-v8.0.0-linux.zip \
    && unzip capa-v8.0.0-linux.zip \
    && ln -s ${PROJECT_PATH}/capa/capa /usr/local/bin/capa

# Install Floss
WORKDIR ${PROJECT_PATH}/floss
RUN wget -q https://github.com/mandiant/flare-floss/releases/download/v3.1.1/floss-v3.1.1-linux.zip \
    && unzip floss-v3.1.1-linux.zip \
    && ln -s ${PROJECT_PATH}/floss/floss /usr/local/bin/floss

# Build Stringsifter
WORKDIR ${PROJECT_PATH}/stringsifter
COPY requirements/stringsifter-requirements.txt stringsifter/wrapper.py ./
# Installed at system level because virtualenv does not work as expected
# ModuleNotFoundError: No module named 'pybind11' while trying to build
RUN pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir -r stringsifter-requirements.txt \
    && chmod +x wrapper.py

# Then Build every possible other Python application inside its virtual environment
# Build PEFrame
WORKDIR ${PROJECT_PATH}/peframe
COPY requirements/peframe-requirements.txt ./
RUN python3 -m venv venv \
    && . venv/bin/activate \
    && pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir -r peframe-requirements.txt --no-cache-dir

# Build Qiling
WORKDIR ${PROJECT_PATH}/qiling
COPY requirements/qiling-requirements.txt qiling/analyze.py ./
RUN python3 -m venv venv \
    && . venv/bin/activate \
    && pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir -r qiling-requirements.txt

# Build APKiD
WORKDIR ${PROJECT_PATH}/apkid
COPY requirements/apkid-requirements.txt ./
RUN python3 -m venv venv \
    && . venv/bin/activate \
    && pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir -r apkid-requirements.txt

# Install GoReSym
WORKDIR ${PROJECT_PATH}/goresym
RUN wget -q https://github.com/mandiant/GoReSym/releases/download/v2.7.4/GoReSym-linux.zip \
    && unzip GoReSym-linux.zip \
    && chmod +x GoReSym \
    && ln -s ${PROJECT_PATH}/goresym/GoReSym /usr/local/bin/goresym
    
# Install DroidLysis
WORKDIR "${PROJECT_PATH}/droidlysis"
COPY requirements/droidlysis-requirements.txt ./
RUN python3 -m venv venv \
 && . venv/bin/activate \
 && pip3 install --no-cache-dir --upgrade pip \
 && pip3 install --no-cache-dir -r droidlysis-requirements.txt --no-cache-dir \
 && mkdir -p ~/softs \
 && cd ~/softs \
 && wget -q https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.3.jar \
 && wget -q https://bitbucket.org/JesusFreke/smali/downloads/baksmali-2.5.2.jar \
 && wget -q https://github.com/pxb1988/dex2jar/releases/download/v2.4/dex-tools-v2.4.zip \
 && unzip dex-tools-v2.4.zip \
 && rm -f dex-tools-v2.4.zip \
 && apt-get -y install --no-install-recommends openjdk-17-jdk \
 && mkdir -p "${PROJECT_PATH}/droidlysis/out" "${PROJECT_PATH}/droidlysis/conf" /root/.cache/droidlysis \
 && chown -R ${USER}:${USER} /root/.cache/droidlysis \
 && chmod 711 /root/ \
 && DROIDLYSIS_PATH="$(pip3 show droidlysis | grep Location | cut -d ' ' -f 2)" \
 && cp "${DROIDLYSIS_PATH}/conf/"*.conf "${PROJECT_PATH}/droidlysis/conf/" \
 && rm -f "${PROJECT_PATH}/droidlysis/conf/general.conf"
COPY ./droidlysis/general.conf ${PROJECT_PATH}/droidlysis/conf/general.conf

# Install artifacts
WORKDIR ${PROJECT_PATH}/artifacts
RUN python3 -m venv venv \
    && . venv/bin/activate \
    && pip3 install --no-cache-dir --upgrade pip \
    && git clone https://github.com/guelfoweb/artifacts.git \
    && cd artifacts \
    && pip install --no-cache-dir -r requirements.txt \
    && chmod +x artifacts.py 

# Install Detect-it-Easy
WORKDIR ${PROJECT_PATH}/die
RUN apt-get install --no-install-recommends -y wget tar libglib2.0-0 && \
    wget -q https://github.com/horsicq/DIE-engine/releases/download/3.01/die_lin64_portable_3.01.tar.gz && \
    tar -xzf die_lin64_portable_3.01.tar.gz

# MobSF
WORKDIR ${PROJECT_PATH}/mobsf
COPY requirements/mobsf-requirements.txt ./
RUN python3 -m venv venv \
    && . venv/bin/activate \
    && pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir -r mobsf-requirements.txt \
    && mkdir -p /root/.semgrep/ \
    && chown -R ${USER}:${USER} /root/.semgrep \
    && chmod 711 /root

# Install Thug
# https://github.com/buffer/thug/blob/master/docker/Dockerfile
WORKDIR ${PROJECT_PATH}/thug
COPY requirements/thug-requirements.txt ./
RUN python3 -m venv venv \
    && . venv/bin/activate \
    && pip3 install --no-cache-dir --upgrade pip \
    # this is the python 3.9 version. Once you update the base image you should switch to the right version (cp39)
    && wget -q https://github.com/cloudflare/stpyv8/releases/download/v12.7.224.18/stpyv8-12.7.224.18-cp39-cp39-manylinux_2_31_x86_64.whl \
    && pip3 install --no-cache-dir stpyv8-12.7.224.18-cp39-cp39-manylinux_2_31_x86_64.whl \
    && rm stpyv8-12.7.224.18-cp39-cp39-manylinux_2_31_x86_64.whl \
    && mkdir -p /usr/share/stpyv8 \
    && git clone https://github.com/buffer/libemu.git && cd libemu && autoreconf -v -i && ./configure && make install && cd .. && rm -rf libemu && ldconfig \
    && pip3 install --no-cache-dir -r thug-requirements.txt \
    && git clone --depth 1 https://github.com/buffer/thug.git \
    && mkdir -p /etc/thug \
    && cp -R thug/thug/conf/* /etc/thug \
    && rm -rf thug \
    && mkdir -p /tmp/thug/logs \
    && chown -R ${USER}:${USER} /tmp/thug/logs /etc/thug

# prepare fangfrisch installation
COPY crontab /etc/cron.d/crontab
RUN mkdir -m 0770 -p /var/lib/fangfrisch \
    && chgrp ${USER} /var/lib/fangfrisch \
    && touch /var/log/cron.log \
    && chmod 0644 /etc/cron.d/crontab /var/log/cron.log

# Build Flask REST API
WORKDIR ${PROJECT_PATH}/flask
COPY app.py requirements/flask-requirements.txt entrypoint.sh ./
RUN python3 -m venv venv \
    && . venv/bin/activate \
    && pip3 install --no-cache-dir --upgrade pip \
    && pip3 install --no-cache-dir -r flask-requirements.txt \
    && chmod +x entrypoint.sh

# Cleanup
RUN chown -R ${USER}:${USER} ${PROJECT_PATH} \
    && apt-get remove --purge -y wget git gcc \
    && apt-get clean \
    && apt-get autoclean \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* /usr/share/doc/* /usr/share/man/* > /dev/null 2>&1

# adding ClamAV config files and sigs to respective volumes
# these copies are required in case a Docker Volume is used instead of a Bind volume (Swarm deployments)
COPY clamav/etc/* /etc/clamav
COPY clamav/sigs/* /var/lib/clamav
# Permission juggling for ClamAV Analyzer
RUN mkdir -p /var/run/clamav ${LOG_PATH} ${LOG_PATH}/clamav && \
    touch ${LOG_PATH}/gunicorn_access.log ${LOG_PATH}/gunicorn_errors.log && \
    chmod 755 /var/run/clamav && \
    chown -R ${USER}:${USER} /var/run/clamav ${LOG_PATH}

# Serve Flask application using gunicorn
EXPOSE 4002
ENTRYPOINT ["./entrypoint.sh"]