#!/usr/bin/env bash

generic_version_regex="^[0-9]{1,2}\.[0-9]{1,2}.[0-9]{1,2}$"
version_regex="^[3-9]\.[0-9]{1,2}.[0-9]{1,2}$"

check_parameters () {
  if [[ $# -lt 2 ]]; then
    echo "Error! Provide at least the environment and a command." >&2
    echo "Synopsis: start <env> <command> [OPTIONS]"
    exit 2
  fi

  # little trick for exact matching in arrays
  declare -A env_arguments=(["prod"]=1 ["test"]=1 ["ci"]=1)
  declare -A test_mode=(["test"]=1 ["ci"]=1)
  declare -A cmd_arguments=(["build"]=1 ["up"]=1 ["start"]=1 ["restart"]=1 ["down"]=1 ["stop"]=1 ["kill"]=1 ["logs"]=1 ["ps"]=1)

  if ! [[ ${env_arguments["${1}"]} ]]; then
    echo "Error! Illegal environment specified." >&2
    exit 2
  fi
  if ! [[ ${cmd_arguments["${2}"]} ]]; then
    echo "Error! Illegal command specified." >&2
    exit 2
  fi

  env_argument=$1
  cmd_argument=$2
  shift 2
}

# we should be able to start only with this script even the first time
#  if [ -d venv/ ]; then
#    ./initialize.sh
  # TODO: check that we are really in a venv
#  fi
# load all variables from file


check_parameters "$@"

export "$(grep -v '^#' docker/.env | xargs -d '\n')"
current_version=${REACT_APP_INTELOWL_VERSION/"v"/""}
pyelastic_default_version="7.4.1"
pycti_default_version="5.10.0"

docker_analyzers=("tor_analyzers" "malware_tools_analyzers" "cyberchef" "pcap_analyzers")

declare -A path_mapping=(["default"]="docker/default.yml" ["postgres"]="docker/postgres.override.yml" ["rabbitmq"]="docker/rabbitmq.override.yml" ["test"]="docker/test.override.yml" ["ci"]="docker/ci.override.yml" ["custom"]="docker/custom.override.yml" ["traefik"]="docker/traefik.override.yml" ["multi_queue"]="docker/multi-queue.override.yml" ["test_multi_queue"]="docker/test.multi-queue.override.yml" ["flower"]="docker/flower.override.yml" ["test_flower"]="docker/test.flower.override.yml" ["elastic"]="docker/elasticsearch.override.yml" ["https"]="docker/https.override.yml" ["nfs"]="docker/nfs.override.yml")
for value in "${docker_analyzers[@]}"; do
  path_mapping[$value]+="integrations/${value}/compose.yml"
done
for value in "${docker_analyzers[@]}"; do
  path_mapping["${value}.test"]+="integrations/${value}/compose-tests.yml"
done
for value in "${docker_analyzers[@]}"; do
  path_mapping["all_analyzers"]+="${path_mapping[$value]} ";
  path_mapping["all_analyzers.test"]+="${path_mapping["${value}.test"]} ";
done

if [[ ${test_mode[*]} =~ $env_argument ]]; then
  is_test=true
  test_appendix="test"
fi

