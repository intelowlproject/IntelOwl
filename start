#!/usr/bin/env bash

generic_version_regex="^[0-9]{1,2}\.[0-9]{1,2}.[0-9]{1,2}$"
version_regex="^[3-9]\.[0-9]{1,2}.[0-9]{1,2}$"

print_help () {
  echo "SYNOPSIS"
  echo -e "Usage: start <env> <command> [OPTIONS]\n"
  echo "ARGUMENTS"
  echo "    <env>    Environment for execution"
  echo -e "    <command>    Command for docker compose\n"
  echo "OPTIONS"
  echo "    --project_name <name>       Specify project name."
  echo "    --version <value>           Choose the version you would like to install"
  echo "                                (>=3.0.0). Works only in 'prod' mode. Default"
  echo "                                version is the most recently released."
  echo "    --all_analyzers             Uses every integration."
  echo "    --tor_analyzers             Uses the integrations/tor_analyzers/compose.yml"
  echo "                                file."
  echo "    --malware_tools_analyzers   Uses the integrations/malware_tools_analyzers/"
  echo "                                compose.yml file."
  echo "    --cyberchef                 Uses the integrations/cyberchef/compose.yml file."
  echo "    --pcap_analyzers            Uses the integrations/pcap_analyzers/compose.yml"
  echo "                                file."
  echo "    --multi_queue               Uses the multiqueue.override.yml compose file."
  echo "    --nfs                       Uses the nfs.override.yml compose file."
  echo "    --traefik                   Uses the traefik.override.yml compose file."
  echo "    --use-external-database     Do not use postgres.override.yml compose file."
  echo "    --use-external-broker       Do not use rabbitmq.override.yml compose file."
  echo "    --flower                    Uses the flower.override.yml compose file."
  echo "    --custom                    Uses custom.override.yml to leverage your"
  echo "                                customized configuration."
  echo "    --debug-build               See more verbose output from the build."
  echo "    --elastic                   This spins up Elasticsearch and Kibana on your"
  echo "                                machine (might need >=16GB of RAM)."
  echo "    --https                     This leverage the https.override.yml file that"
  echo "                                can be used to host IntelOwl with HTTPS and your"
  echo "                                own certificate."
  echo "    --pycti-version <value>     The pycti version to choose. This must match the"
  echo "                                OpenCTI server version you are connecting to."
  echo "                                Default is ${pycti_default_version}."
  echo "    --pyelastic-version <value> The py-elasticsearch version to choose. This must"
  echo "                                match the server version you are connecting to."
  echo "                                Default is ${pyelastic_default_version}."
}

check_parameters () {
  if [[ $# -lt 2 ]]; then
    echo "Error! Provide at least the environment and a command." >&2
    print_help
    exit 2
  fi

  # little trick for exact matching in arrays
  declare -A env_arguments=(["prod"]=1 ["test"]=1 ["ci"]=1)
  declare -A test_mode=(["test"]=1 ["ci"]=1)
  declare -A cmd_arguments=(["build"]=1 ["up"]=1 ["start"]=1 ["restart"]=1 ["down"]=1 ["stop"]=1 ["kill"]=1 ["logs"]=1 ["ps"]=1)

  if ! [[ ${env_arguments["${1}"]} ]]; then
    echo "Error! Illegal environment specified." >&2
    exit 2
  fi
  if ! [[ ${cmd_arguments["${2}"]} ]]; then
    echo "Error! Illegal command specified." >&2
    exit 2
  fi

  env_argument=$1
  cmd_argument=$2
}

set_defaults_values () {
  project_name="intel_owl"
  version=current_version
  export PYELASTIC_VERSION=pyelastic_default_version
  export PYCTI_VERSION=pycti_default_version
}
# we should be able to start only with this script even the first time
#  if [ -d venv/ ]; then
#    ./initialize.sh
  # TODO: check that we are really in a venv
#  fi
# load all variables from file

check_parameters "$@" && shift 2

export "$(grep -v '^#' docker/.env | xargs -d '\n')"
current_version=${REACT_APP_INTELOWL_VERSION/"v"/""}
pyelastic_default_version="7.4.1"
pycti_default_version="5.10.0"

docker_analyzers=("tor_analyzers" "malware_tools_analyzers" "cyberchef" "pcap_analyzers")

declare -A path_mapping=(["default"]="docker/default.yml" ["postgres"]="docker/postgres.override.yml" ["rabbitmq"]="docker/rabbitmq.override.yml" ["test"]="docker/test.override.yml" ["ci"]="docker/ci.override.yml" ["custom"]="docker/custom.override.yml" ["traefik"]="docker/traefik.override.yml" ["multi_queue"]="docker/multi-queue.override.yml" ["test_multi_queue"]="docker/test.multi-queue.override.yml" ["flower"]="docker/flower.override.yml" ["test_flower"]="docker/test.flower.override.yml" ["elastic"]="docker/elasticsearch.override.yml" ["https"]="docker/https.override.yml" ["nfs"]="docker/nfs.override.yml")
for value in "${docker_analyzers[@]}"; do
  path_mapping["${value}"]+="integrations/${value}/compose.yml"
  path_mapping["${value}.test"]+="integrations/${value}/compose-tests.yml"
  path_mapping["all_analyzers"]+="${path_mapping[${value}]} ";
  path_mapping["all_analyzers.test"]+="${path_mapping["${value}.test"]} ";
done

if [[ ${test_mode[*]} =~ $env_argument ]]; then
  is_test=true
  test_appendix="test"
fi

# parse arguments
set_defaults_values
while [[ $# -gt 0 ]]; do
  case $1 in
  --project_name)
    project_name=$2
    shift 2
  ;;
  --version)
    if ! [[ $2 =~ $version_regex ]]; then
      echo "Error! Wrong version format." >&2
      exit 1
    fi
    version=$2
    shift 2
  ;;
  --all_analyzers)
    all_analyzers=true
    shift 1
  ;;
  --multi_queue)
    multi_queue=true
    shift 1
  ;;
  --nfs)
    nfs=true
    shift 1
  ;;
  --use-external-database)
    use_external_database=true
    shift 1
  ;;
  --use-external-broker)
    use_external_broker=true
    shift 1
  ;;
  --flower)
    flower=true
    shift 1
  ;;
  --custom)
    custom=true
    shift 1
  ;;
  --debug-build)
    debug_build=true
    shift 1
  ;;
  --elastic)
    elastic=true
    shift 1
  ;;
  --pyelastic-version)
    if ! [[ $2 =~ $generic_version_regex ]]; then
      echo "Error! Wrong pyelastic version format." >&2
      exit 1
    fi
    export PYELASTIC_VERSION=$2
    shift 2
  ;;
  --pycti-version)
    if ! [[ $2 =~ $generic_version_regex ]]; then
      echo "Error! Wrong pycti version format." >&2
      exit 1
    fi
    export PYCTI_VERSION=$2
    shift 2
  ;;
  --https)
    https=true
    shift 1
  ;;
  -h | --help)
    print_help
    exit 0
    ;;
  --) shift; break;; # explicit end of arguments
  *)
    echo "Error! Invalid option $1."
    exit 1
    ;;
  esac
done